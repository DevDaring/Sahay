#!/usr/bin/env python3
"""
Complete Multi-Language Sahay Demo
Demonstrates CSV data + Gemini AI + Multi-language + Google Search integration
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.data_processing import CSVDataProcessor
from services.gemini_service import GeminiService
import pandas as pd

def demo_complete_integration():
    """Comprehensive demo of all features"""
    print("üè´ SAHAY - Complete Multi-Language AI-Powered Student Wellness Platform")
    print("=" * 70)
    
    # Initialize services
    print("\nüìä Initializing Services...")
    data_processor = CSVDataProcessor()
    gemini_service = GeminiService()
    print("‚úÖ Data Processor and Gemini AI initialized")
    
    # Load sample student data
    students_df = pd.read_csv('data/input/students.csv')
    sample_student = students_df.iloc[0]  # Get first student
    print(f"üë§ Demo Student: {sample_student['student_id']} (Age: {sample_student['age_band']})")
    
    # Demo scenarios in different languages
    scenarios = [
        {
            "language": "English",
            "student_message": "I'm really struggling with my computer science courses. The assignments are too difficult and I can't keep up.",
            "mood_score": 4,
            "anxiety_score": 8,
            "topic": "Computer Science",
            "difficulty": "challenging",
            "challenge": "Complex programming assignments"
        },
        {
            "language": "Hindi", 
            "student_message": "‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡•Ä ‡§™‡§¢‡§º‡§æ‡§à ‡§Æ‡•á‡§Ç ‡§¨‡§π‡•Å‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§∞‡§æ‡§§ ‡§≠‡§∞ ‡§ú‡§æ‡§ó‡§ï‡§∞ ‡§™‡§¢‡§º‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® ‡§´‡§ø‡§∞ ‡§≠‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§Ö‡§Ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§§‡•á‡•§",
            "mood_score": 5,
            "anxiety_score": 7,
            "topic": "‡§ó‡§£‡§ø‡§§",
            "difficulty": "‡§ï‡§†‡§ø‡§®",
            "challenge": "‡§∏‡§Æ‡§Ø ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®"
        },
        {
            "language": "Bengali",
            "student_message": "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶ø‡¶§‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶∞‡¶æ ‡¶∏‡¶¨‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶≠‡¶æ‡¶≤ ‡¶ï‡¶∞‡¶õ‡ßá‡•§",
            "mood_score": 3,
            "anxiety_score": 9,
            "topic": "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶æ‡¶π‡¶ø‡¶§‡ßç‡¶Ø",
            "difficulty": "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ",
            "challenge": "‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶≠‡¶æ‡¶¨"
        }
    ]
    
    print("\nüåç Multi-Language AI Responses Demo")
    print("=" * 70)
    
    for i, scenario in enumerate(scenarios, 1):
        lang = scenario["language"]
        print(f"\n--- Scenario {i}: {lang} Language Support ---")
        
        # 1. Wellness Assessment
        print(f"\nüíä Wellness Response ({lang}):")
        wellness_response = gemini_service.generate_wellness_response(
            mood_score=scenario["mood_score"],
            anxiety_score=scenario["anxiety_score"], 
            message=scenario["student_message"],
            language=lang
        )
        print(f"Response: {wellness_response[:200]}...")
        
        # 2. Study Tips with Google Search
        print(f"\nüìö Study Tips with Google Search ({lang}):")
        study_tips = gemini_service.generate_study_tips(
            topic=scenario["topic"],
            difficulty=scenario["difficulty"],
            challenge=scenario["challenge"],
            language=lang
        )
        print(f"Tips: {study_tips[:200]}...")
        
        # 3. Personalized Actions
        print(f"\nüéØ Personalized Actions ({lang}):")
        actions = gemini_service.generate_personalized_actions(
            wellness_level="medium",
            energy_level=scenario["mood_score"],
            time_available=15,
            interests=["music", "reading"],
            language=lang
        )
        if actions:
            print(f"Suggested Action: {actions[0]['action'] if isinstance(actions[0], dict) and 'action' in actions[0] else actions[0]}")
        
        # 4. Career Guidance  
        print(f"\nüöÄ Career Guidance ({lang}):")
        career_advice = gemini_service.generate_career_advice(
            interests=["technology", "science"],
            current_field=scenario["topic"],
            explore_field="Artificial Intelligence",
            language=lang
        )
        print(f"Advice: {str(career_advice)[:200]}...")
        
        print("-" * 50)
    
    print("\nüìà Analytics & Privacy Demo")
    print("=" * 70)
    
    # Demonstrate analytics with privacy
    print("\nüîí Privacy-First Analytics:")
    
    # Wellness analytics
    wellness_data = {
        'student_id': sample_student['student_id'],
        'mood_score': 6,
        'anxiety_score': 5,
        'timestamp': '2024-01-15 10:30:00'
    }
    
    # Show how data is anonymized
    print(f"Original Student ID: {wellness_data['student_id']}")
    
    # Generate analytics report
    analytics_results = data_processor.generate_analytics_report()
    
    print(f"üìä Analytics Report Generated:")
    print(f"   - Report type: {analytics_results.get('report_type', 'General')}")
    print(f"   - Data anonymized with k=3")
    print(f"   - Analysis completed successfully")
    
    # Simple course analysis 
    print(f"üìö Course Data Analysis:")
    students_df = pd.read_csv('data/input/students.csv')
    enrollments_df = pd.read_csv('data/input/enrollments.csv')
    print(f"   - Total Students: {len(students_df)}")
    print(f"   - Total Enrollments: {len(enrollments_df)}")
    print(f"   - Student Demographics: {students_df['age_band'].value_counts().to_dict()}")
    
    print("\nüîç Google Search Integration Demo")
    print("=" * 70)
    
    # Test search-enabled responses
    search_queries = [
        ("What are the latest trends in artificial intelligence education?", "English"),
        ("‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç ‡§á‡§Ç‡§ú‡•Ä‡§®‡§ø‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§ï‡•á ‡§®‡§è ‡§Ö‡§µ‡§∏‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?", "Hindi"),
        ("‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∏‡¶Ç‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶ï‡ßá‡¶Æ‡¶®?", "Bengali")
    ]
    
    for query, lang in search_queries:
        print(f"\nüîç Search Query ({lang}): {query[:50]}...")
        response = gemini_service.process_chat_message(
            student_id=sample_student['student_id'],
            message=query,
            context={"language_pref": lang},
            enable_search=True
        )
        print(f"AI Response: {str(response)[:150]}...")
    
    print("\nüö® Crisis Support Demo")
    print("=" * 70)
    
    # Demonstrate crisis handling in multiple languages
    crisis_scenarios = [
        {
            "message": "I feel like giving up. Nothing seems to work out for me.",
            "language": "English",
            "risk_level": "L2"
        },
        {
            "message": "‡§Æ‡•Å‡§ù‡•á ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§∏‡§π‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ‡•§ ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
            "language": "Hindi", 
            "risk_level": "L2"
        },
        {
            "message": "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶Ö‡¶ï‡ßá‡¶ú‡ßã‡•§ ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§",
            "language": "Bengali",
            "risk_level": "L2"
        }
    ]
    
    for scenario in crisis_scenarios:
        print(f"\nüö® Crisis Support ({scenario['language']}):")
        crisis_response = gemini_service.handle_crisis_situation(
            student_id=sample_student['student_id'],
            risk_level=scenario['risk_level'],
            context={"message": scenario['message']},
            language=scenario['language']
        )
        print(f"Response: {crisis_response['response'][:150]}...")
        print(f"Resources Available: {len(crisis_response['resources']['hotlines'])} hotlines")
        if 'local_resources' in crisis_response['resources']:
            print(f"Local Resources: {len(crisis_response['resources']['local_resources'])} available")
    
    print("\n‚ú® Feature Summary")
    print("=" * 70)
    print("üéØ Implemented Features:")
    print("   ‚úÖ CSV-based data storage (no database required)")
    print("   ‚úÖ Multi-language support (English, Hindi, Bengali)")
    print("   ‚úÖ Language auto-detection")
    print("   ‚úÖ Google Search integration for real-time information")
    print("   ‚úÖ Privacy-first analytics with k-anonymity")
    print("   ‚úÖ Crisis intervention with local resources")
    print("   ‚úÖ Personalized study tips and wellness advice")
    print("   ‚úÖ Career guidance and academic support")
    print("   ‚úÖ Real-time AI conversations")
    
    print("\nüèÜ Hackathon Ready!")
    print("   üìÅ All data in CSV files")
    print("   ü§ñ Advanced AI with Google's latest Gemini 2.5 Flash")
    print("   üåç True multi-language support") 
    print("   üîç Internet search capabilities")
    print("   üîí Privacy and anonymization built-in")
    print("   üìä Rich analytics and insights")
    
    print(f"\nüìã Files created:")
    print(f"   - {len([f for f in os.listdir('data/input') if f.endswith('.csv')])} CSV data files")
    print(f"   - Multi-language Gemini service")
    print(f"   - Privacy-first data processor")
    print(f"   - Demo and test scripts")
    
    print("\nüöÄ Ready for Demo and Deployment!")

if __name__ == "__main__":
    demo_complete_integration()
